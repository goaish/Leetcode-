// C++ Solution 

class Solution {
public:
    int maxScoreSightseeingPair(vector<int>& values) {
        int n= values.size();
        if(n<2) return values[0]+values[1] +0-1;
        vector<int> suffixMax(n);
        suffixMax[n-1] = values[n-1] -(n-1);
        for(int i=n-2 ; i>=0;i--){
            suffixMax[i]=max(suffixMax[i+1],values[i]-i);
        }
        int maxScore=INT_MIN;
        for(int i=0 ; i<n-1;i++){
            maxScore=max(maxScore, values[i]+i+suffixMax[i+1]);
        }
        
        return maxScore;
    }
};

// Java Solution 

class Solution {
    public int maxScoreSightseeingPair(int[] values) {
        int answer = Integer.MIN_VALUE;
        int m=values[0];

        for(int i=1;i<values.length;i++){
            if(values[i]-i+m>answer){
                answer=values[i]-i+m;
            }

            if(values[i]+i>m){
                m=values[i]+i;
            }
        }
        return answer;
        
    }
}
